//! PPTX converter implementation
//!
//! Follows Docling's pipeline: PPTX â†’ PDF (via LibreOffice) â†’ Parse as PDF
//! Each slide becomes a page in the PDF, which can be processed individually.

use super::traits::{ConverterMetadata, DocumentConverter};
use super::pdf::PdfConverter;
use crate::types::{ConversionOptions, ConversionResult, FileFormat, OutputFormat};
use crate::Result;
use async_trait::async_trait;
use std::path::Path;
use std::process::Command;
use tokio::fs;

/// PPTX to Markdown converter
///
/// Uses LibreOffice to convert PPTX â†’ PDF (one slide = one page), then processes as PDF
pub struct PptxConverter {
    pdf_converter: PdfConverter,
}

impl PptxConverter {
    /// Create a new PPTX converter
    pub fn new() -> Self {
        Self {
            pdf_converter: PdfConverter::new(),
        }
    }
    
    /// Convert PPTX to PDF using LibreOffice
    async fn pptx_to_pdf(&self, path: &Path) -> Result<std::path::PathBuf> {
        eprintln!("ðŸ“Š Converting PPTX to PDF (LibreOffice)...");
        
        let temp_dir = std::env::temp_dir().join(format!("transmutation_pptx_{}", std::process::id()));
        fs::create_dir_all(&temp_dir).await?;
        
        // Detect OS and use appropriate LibreOffice command
        let (libreoffice_cmd, install_msg) = if cfg!(target_os = "windows") {
            ("soffice.exe", "Install LibreOffice from https://www.libreoffice.org/download/")
        } else if cfg!(target_os = "macos") {
            ("/Applications/LibreOffice.app/Contents/MacOS/soffice", "Install: brew install libreoffice")
        } else {
            ("libreoffice", "Install: sudo apt install libreoffice")
        };
        
        let output = Command::new(libreoffice_cmd)
            .arg("--headless")
            .arg("--convert-to")
            .arg("pdf")
            .arg("--outdir")
            .arg(&temp_dir)
            .arg(path)
            .output()
            .map_err(|e| crate::TransmutationError::engine_error(
                "libreoffice",
                format!("Failed to run LibreOffice: {}.\n{}", e, install_msg)
            ))?;
        
        if !output.status.success() {
            let stderr = String::from_utf8_lossy(&output.stderr);
            let _ = fs::remove_dir_all(&temp_dir).await;
            return Err(crate::TransmutationError::engine_error(
                "libreoffice",
                format!("LibreOffice failed: {}", stderr)
            ));
        }
        
        // Find generated PDF (LibreOffice converts each slide to a page)
        let filename = path.file_stem().and_then(|s| s.to_str()).unwrap_or("presentation");
        let pdf_path = temp_dir.join(format!("{}.pdf", filename));
        
        if !pdf_path.exists() {
            let _ = fs::remove_dir_all(&temp_dir).await;
            return Err(crate::TransmutationError::engine_error(
                "libreoffice",
                "PDF not generated by LibreOffice".to_string()
            ));
        }
        
        let pdf_size = pdf_path.metadata()?.len();
        eprintln!("      âœ“ PDF: {} KB ({} slides as pages)", pdf_size / 1024, filename);
        
        Ok(pdf_path)
    }
}

impl Default for PptxConverter {
    fn default() -> Self {
        Self::new()
    }
}

#[async_trait]
impl DocumentConverter for PptxConverter {
    fn supported_formats(&self) -> Vec<FileFormat> {
        vec![FileFormat::Pptx]
    }

    fn output_formats(&self) -> Vec<OutputFormat> {
        vec![
            OutputFormat::Markdown {
                split_pages: true,  // Split by slide
                optimize_for_llm: true,
            },
            OutputFormat::Image {
                format: crate::types::ImageFormat::Png,
                quality: 85,
                dpi: 150,
            },
        ]
    }

    async fn convert(
        &self,
        input: &Path,
        output_format: OutputFormat,
        options: ConversionOptions,
    ) -> Result<ConversionResult> {
        eprintln!("ðŸ”„ PPTX Conversion Pipeline (Docling-style)");
        eprintln!("   PPTX â†’ PDF (slides as pages) â†’ Parse â†’ Markdown");
        eprintln!();
        
        // Step 1: Convert PPTX to PDF (each slide = one page)
        let pdf_path = self.pptx_to_pdf(input).await?;
        
        // Step 2: Convert PDF to desired format using existing PDF pipeline
        // If split_pages=true, each slide will be a separate file
        eprintln!("ðŸ“„ Parsing PDF slides (reusing PDF converter)...");
        let result = self.pdf_converter.convert(&pdf_path, output_format, options).await?;
        
        // Step 3: Cleanup temporary PDF
        let temp_dir = pdf_path.parent().unwrap();
        let _ = fs::remove_dir_all(temp_dir).await;
        
        eprintln!("âœ… PPTX conversion complete ({} slides)!", result.content.len());
        Ok(result)
    }

    fn metadata(&self) -> ConverterMetadata {
        ConverterMetadata {
            name: "PPTX Converter".to_string(),
            version: env!("CARGO_PKG_VERSION").to_string(),
            description: "PPTX to Markdown converter (via LibreOffice â†’ PDF pipeline)".to_string(),
            external_deps: vec!["LibreOffice".to_string()],
        }
    }
}

